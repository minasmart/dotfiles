#!/usr/bin/env zsh

function _vcs_info_reset {
  _vcs_info_left=''
  _vcs_info_right=''
  for k in "${(@k)_vcs_values}"; do
    _vcs_values[$k]=''
  done
}

function +vi-git-remote-status {
  local ahead_symbol behind_symbol

  ahead_symbol="⬆"
  behind_symbol="⬇"

  if [ $(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l) -gt 0 ]; then
    _vcs_values[ahead]=$ahead_symbol
  fi

  if [ $(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l) -gt 0 ]; then
    _vcs_values[behind]=$behind_symbol
  fi
}

function +vi-git-untracked {
  if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && git status --porcelain | grep '??' &> /dev/null ; then
    _vcs_values[untracked]="◼"
  fi
}

function +vi-git-stashed {
  if [ $(git stash list | wc -l) -gt 0 ]; then
    _vcs_values[stashed]="✭"
  fi
}

function +vi-git-deleted {
  if [ $(git ls-files --deleted | wc -l) -gt 0 ]; then
    _vcs_values[deleted]="✖"
  fi
}

function _build_prompt_pwd {
  local pwd="${PWD/#$HOME/~}"

  if [[ "$pwd" == (#m)[/~] ]]; then
    _prompt_pwd="$MATCH"
    unset MATCH
  else
    _prompt_pwd="${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}/${pwd:t}"
  fi
}

function _build_prompt_vcs_info {
  _vcs_info_reset

  if [[ -z $PROMPT_IGNORE_GIT ]]; then
    vcs_info

    local messages

    if [[ -n ${vcs_info_msg_0_} ]]; then
      messages=("${(@s/,/)vcs_info_msg_0_}")

      _vcs_info_left="${messages[1]}"

      _vcs_values[unstaged]=${messages[2]}
      _vcs_values[staged]=${messages[3]}
      _vcs_values[misc]=${messages[4]}

      [[ -n ${_vcs_values[misc]} ]] && _vcs_info_right+=" %F{magenta}${_vcs_values[staged]}%f"
      [[ -n ${_vcs_values[untracked]} ]] && _vcs_info_right+=" %F{15}${_vcs_values[untracked]}%f"
      [[ -n ${_vcs_values[unstaged]} ]] && _vcs_info_right+=" %F{blue}${_vcs_values[unstaged]}%f"
      [[ -n ${_vcs_values[deleted]} ]] && _vcs_info_right+=" %F{09}%B${_vcs_values[deleted]}%b%f"
      [[ -n ${_vcs_values[staged]} ]] && _vcs_info_right+=" %F{green}${_vcs_values[staged]}%f"
      [[ -n ${_vcs_values[stashed]} ]] && _vcs_info_right+=" %F{cyan}${_vcs_values[stashed]}%f"
      [[ -n ${_vcs_values[ahead]} ]] && _vcs_info_right+=" %F{15}${_vcs_values[ahead]}%f"
      [[ -n ${_vcs_values[behind]} ]] && _vcs_info_right+=" %F{11}${_vcs_values[behind]}%f"
    fi
  fi
}

function precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Build prompt parts
  _build_prompt_pwd
  _build_prompt_vcs_info
}

function set_vcs_info_formats {
  # Turn on vcs_info
  autoload -Uz vcs_info
  # Set one vcs message
  zstyle ':vcs_info:-init-:default:-all-' max-exports 1
  # I only really care about git
  zstyle ':vcs_info:*' enable git
  # Use brew git
  zstyle ':vcs_info:git:*:-all-' command /usr/local/bin/git
  # Update git status
  zstyle ':vcs_info:git*:*' get-revision true
  zstyle ':vcs_info:git*:*' check-for-changes true

  # Add some behaviour when the git message is set
  zstyle ':vcs_info:git*+set-message:*' hooks git-remote-status git-untracked git-stashed git-deleted

  # Show dirty files with a fancy *
  zstyle ':vcs_info:*' unstagedstr "✱"
  # Show staged files with a fancy +
  zstyle ':vcs_info:*' stagedstr "✚"

  # vcs_info format string reference:
  # %b - branchname
  # %m - shows stash info
  # %u - unstagedstr (see below)
  # %c - stagedstr (see below)
  # %a - action (e.g. rebase-i)
  # %R - repository path
  # %S - path in the repository

  # Format the left part of the prompt, and dump the rest separated by ','.
  # These are consumed in the method above where all the parts are staged
  local scm_format="%F{08}%s%f"
  local branch_format="%F{blue}%b%f"
  local action_format="%F{135}%a%f"
  zstyle ':vcs_info:git*' formats "${scm_format}[$branch_format] ,%u,%c,%m"
  zstyle ':vcs_info:git*' actionformats "${scm_format}[$branch_format|$action_format] ,%u,%c,%m"

}

function prompt_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  set_vcs_info_formats

  PROMPT='%F{cyan}${_prompt_pwd}%f
${_vcs_info_left}%(?.%F{green}${1:-∴}%f.%F{red}${1:-∴}%f) '
  RPROMPT='${_vcs_info_right}'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

function disable_git_prompt {
  export PROMPT_IGNORE_GIT=1
}

function enable_git_prompt {
  export PROMPT_IGNORE_GIT=
}

typeset -A _vcs_values
setopt prompt_subst
setopt prompt_percent
setopt prompt_cr
autoload -U add-zsh-hook

prompt_setup "$@"
