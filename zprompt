#!/usr/bin/env zsh

function +vi-git-remote-status {
  local ahead behind
  local ahead_symbol behind_symbol
  local -a gitstatus

  ahead_symbol="⬆"
  behind_symbol="⬇"

  if [ $(git rev-list ${hook_com[branch]}@{upstream}..HEAD | wc -l) -gt 0 ]; then
    gitstatus+=( "%F{15}⬆%f" )
  fi

  if [ $(git rev-list HEAD..${hook_com[branch]}@{upstream} | wc -l) -gt 0 ]; then
    gitstatus+=( "%F{11}⬇%f" )
  fi

  hook_com[misc]+=${gitstatus}
}

function +vi-git-untracked {
  if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && git status --porcelain | grep '??' &> /dev/null ; then
    _vcs_info_untracked="%F{15}◼%f"
  else
    _vcs_info_untracked=''
  fi
}

function +vi-git-stashed {
  if [ $(git stash list | wc -l) -gt 0 ]; then
    _vcs_info_stashed=" %B%F{cyan}✭%f%b"
  else
    _vcs_info_stashed=''
  fi
}

function prompt_pwd {
  local pwd="${PWD/#$HOME/~}"

  if [[ "$pwd" == (#m)[/~] ]]; then
    _prompt_pwd="$MATCH"
    unset MATCH
  else
    _prompt_pwd="${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}/${pwd:t}"
  fi
}

function precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD
  prompt_pwd
  vcs_info

  local messages
  local rprompt_parts

  if [[ -n ${vcs_info_msg_0_} ]]; then
    messages=("${(@s/,/)vcs_info_msg_0_}")
    rprompt_parts=("${(@s/ /)messages[2]}")

    _vcs_info="${messages[1]}"
    _vcs_info_right="$_vcs_info_untracked ${messages[2]}$_vcs_info_stashed"
  else
    _vcs_info=''
    _vcs_info_right=''
  fi
}

function format_vcs_info {
  # Turn on vcs_info
  autoload -Uz vcs_info
  # Set one vcs message
  zstyle ':vcs_info:-init-:default:-all-' max-exports 1
  # I only really care about git
  zstyle ':vcs_info:*' enable git
  # Use brew git
  zstyle ':vcs_info:git:*:-all-' command /usr/local/bin/git
  # Update git status
  zstyle ':vcs_info:git*:*' get-revision true
  zstyle ':vcs_info:git*:*' check-for-changes true

  # Add some behaviour when the git message is set
  zstyle ':vcs_info:git*+set-message:*' hooks git-remote-status git-untracked git-stashed

  # Show dirty files with a fancy *
  zstyle ':vcs_info:*' unstagedstr "✱"
  # Show staged files with a fancy +
  zstyle ':vcs_info:*' stagedstr "✚"

  # set formats
  # %b - branchname
  # %m - shows stash info
  # %u - unstagedstr (see below)
  # %c - stagedstr (see below)
  # %a - action (e.g. rebase-i)
  # %R - repository path
  # %S - path in the repository
  local branch_format="%F{blue}%b%f"
  local action_format="%F{135}%a%f"
  local staged_format="%F{green}%c%f"
  local misc_format="%m"
  local unstaged_format="%F{red}%u%f"
  local scm_format="%F{08}%s%f"
  zstyle ':vcs_info:git*' formats "${scm_format}[$branch_format] ,$unstaged_format $staged_format $misc_format"
  zstyle ':vcs_info:git*' actionformats "${scm_format}[$branch_format|$action_format] ,$unstaged_format $staged_format $misc_format"
  #zstyle ':vcs_info:*:prompt:*' unstagedstr "◼"

}

function prompt_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  format_vcs_info

  PROMPT='%F{cyan}${_prompt_pwd}%f
${_vcs_info}%(?.%F{green}${1:-∴}%f.%F{red}${1:-∴}%f) '
  RPROMPT='${_vcs_info_right}'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

setopt prompt_subst
setopt prompt_percent
setopt prompt_cr
autoload -U add-zsh-hook

prompt_setup "$@"
